## /etc/sysctl.conf hardens the Linux kernel and network settings

user www-data;          # Default is 'www www' which is 'nobody'
worker_processes 1;     # Default: 1. Command "ulimit -a" shows your optimal configuration.
pid /var/run/nginx.pid;

events {   
    worker_connections 1024; # Default: 1024
}

http {
    # Enable .css, .js, .png, .jpeg, and more...
    include mime.types;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] $status $request $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for';

    # Prevent DDoS
    limit_req_zone $binary_remote_addr zone=one:10m rate=30r/m; # Limit number of requests
    limit_conn_zone $binary_remote_addr zone=addr:10m;          # Limit number of connections

    # Hide nginx version
    server_tokens off;

    server {
        # IP Address and Port
        listen 443 ssl http2;       # Secure with SSL and use HTTP/2
        server_name 10.0.0.1;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/self.cert;                           # Specifies a file with the certificaate in the PEM format
        ssl_certificate_key /etc/nginx/ssl/self.cert;                       # Specifies a file with the secret key in the PEM format
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;                                # Enables specified protocols. More options: TLSv1.3, SSLv2, SSLv3
        ssl_ciphers AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;    # Enables specified ciphers. Default: HIGH:!aNULL:!MD5;
        ssl_session_cache shared:SSL:10m;                                   # Share cache between worker processes
        ssl_session_timeout 10m;                                            # Time during which a client may reuse the session parameters

        # Controlling buffer overflow attacks
        client_body_buffer_size 1k;
        client_header_buffer_size 1k;
        client_max_body_size 1k;
        large_client_header_buffers 2 1k;

        # Control timeouts to improve server performance and cut clients
        client_body_timeout 10;
        client_header_timeout 10;
        keepalive_timeout 5 5;
        send_timeout 10;

        # Root folder for HTML files
        root html;

        # Index page
        index index.html index.htm index.php;

        # Error page
        error_page 404 /404;

        # Logging
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;

        # Only allow certain request methods. Do not accept DELETE, SEARCH, PUT, PATCH, etc...
        if ($request_method !~ ^(GET|HEAD|POST)$) {
            return 444;
        } 

        # Only allow hosts from certain domains
        if ($host !~ ^(yourcompany.com)$) {
            return 444;
        }

        # Block referer spam.
        if ($http_referer ~* (babes|forsale|girl|jewelry|love|nudit|organic|poker|porn|sex|teen)) {
            return 403;
        }

        # Block robots
        if ($http_user_agent ~* msnbot|scrapbot) {
            return 403;
        }

        # Block download agents
        if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
            return 403;
        }

        # Standard caching of files of common file types
        location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 1y;
        }

        # Locations
        location / {
            limit_req zone=one;         # Limit number of requests
            limit_conn addr 10;         # Limit number of connections
            try_files $uri $uri/ =404;  # try_files checks the existence of files in the specified order and uses the first found file for request processing
        }

        location /404 {
            return 404 "Sorry. This resource does not exist.";
        }

        # Protect .git and other hidden files
        location ~ /\. { 
            deny all; 
        }
        
        # Limiting access by IP Address
        location /secret {
            deny all;
        }

        # Password protected endpoint
        location /login {
            auth_basic "Restricted";
            auth_basic_user_file /usr/local/nginx/conf/.htpasswd/passwd;
        }

        # Avoid image hotlinking
        location /images/ {
            valid_referers none blocked www.example.com example.com;
            if ($invalid_referer) {
                return 403;
            }
        }
    }
}