user www-data;          # Default is 'www www' which is 'nobody'
worker_processes 1;     # Default: 1. Command "ulimit -a" shows your optimal configuration.
pid /var/run/nginx.pid;

events {   
    worker_connections 1024; # Default: 1024
}

http {
    # Enable .css, .js, .png, .jpeg, and more...
    include mime.types;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] $status $request $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for';

    # Caching
    # -----------------------------------------------------------
    # /var/cache/nginx: Path to local disk directory for the cache
    # levels: Defines hierarchy levels of a cache. We use a two-level directory hierarchy under /var/cache/nginx
    # keys_zone (name:size): enables creation of shared memory zone where all active keys and information about data (meta) are stored.
    # inactive: specifies amount of time after which cached data that are not accessed during the time specified gets deleted regardless of refresh.
    # max_size: maximum size of cache
    fastcgi_cache_path /var/cache/nginx levels=1:2 keys_zone=CACHEZONE:60m inactive=3h max_size=2g;
    # Identifier which defines what constitutes a cache hit or miss. Cache based on schema, request method, host and request uri
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    # Calculate cache status to see whether the request is a cache miss or hit
    add_header X-Cache $upstream_cache_status;

    server {
        # IP Address and Port
        listen 80;
        server_name 10.0.0.1;

        # Root folder for HTML files
        root html;

        # Index page
        index index.html index.htm index.php;

        # Error page
        error_page 404 /404;

        # Logging
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;

        # Cache conditions variable
        set $no_cache 0;

        # Disable cache for all requests except GET and HEAD
        if ($request_method !~ ^(GET|HEAD)$) {
            set $no_cache 1;
        }

        # Do not cache if the UURL contains a query string
        if ($query_string != "") {
            set $no_cache 1;
        }

        # Do not cache if there is a cookie called PHPSESSID
        # Add custom cookies here
        if ($http_cookie ~* "nginx_no_cache|PHPSESSID") {
            set $no_cache 1;
        }

        # Wordpress
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
            set $no_cache 1;
        }

        # Magento
        if ($http_cookie ~* "frontend_cid|frontend|sid|adminhtml|EXTERNAL_NO_CACHE") {
            set $no_cache 1;
        }

        # Wordpress
        if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
            set $no_cache 1;
        }

        # Magento
        if ($request_uri ~* "(index|litespeed).php|admin|api|cron.php|/checkout/|/account/|/brand-ambassador/|/brand-ambassador-coupon/|/brand-ambassador-program/|/affiliateplusstatistic/|/brand-ambassador/index/listTransaction/|/brand-ambassador/index/paymentForm/|/brand-ambassador-program/index/index/|/brand-ambassador/banner/list/|/brand-ambassador-coupon/index/index/|/brand-ambassador/refer/index/|/brand-ambassador/index/payments/|/brand-ambassador/index/referrers/|/affiliateplusstatistic/statistic/index/|/brand-ambassador/account/edit/|/checkout/cart/|/repeat-delivery") {
            set $no_cache 1;
        }

        # Standard caching of files of common file types
        # Increase performance by caching on the client side
        location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 1y;                         # Duration of how long to cache
            add_header Cache-Control public;    # Cache-Control for managing cache in HTTP/1.1+ clients
            add_header Pragma public;           # Cache-Control for managing cache in HTTP/1.0- clients
            add_header Vary Accept-Encoding;    # Enables cache to identify a resource based on URI and encoding
        }

        # Locations
        location / {
            # try_files checks the existence of files in the specified order and uses the first found file for request processing
            try_files $uri $uri/ =404;
        }

        location ~\.php$ {
            include fastcgi.conf;
            fastcgi_pass unix:/run/php/php7.4-fpm.sock;     # Sets the address of a FastCGI server
            fastcgi_cache CACHEZONE;                        # Defines a shared memory zone used for caching
            fastcgi_cache_valid 200 60m;                    # Set caching time for different response codes
            fastcgi_cache_valid 404 1m;                     # Set caching time for different response codes
            fastcgi_cache_min_uses 3;                       # Sets number of requests after which response will be cached
            fastcgi_cache_revalidate on;                    # Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” and “If-None-Match” header fields
            fastcgi_cache_use_stale error timeout http_500; # Determines in which cases a stale cached response can be used when an error occurs during communication with the FastCGI server.
            fastcgi_cache_background_update on;             # Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client
            fastcgi_cache_lock on;                          # When enabled, only one request at a time will be allowed to populate a new cache element identified according to the fastcgi_cache_key directive by passing a request to a FastCGI server
            fastcgi_cache_lock_age 10s;                     # If the last request passed to the FastCGI server for populating a new cache element has not completed for the specified time, one more request may be passed to the FastCGI server
            fastcgi_cache_lock_timeout 3s;                  # Requests that have been waiting a specified amount of time to pass through
            fastcgi_cache_bypass $no_cache;                 # Defines conditions under which the response will not be taken from cache
            fastcgi_no_cache $no_cache;                     # Defines conditions under which the response will not be saved to cache
        }

        location /404 {
            return 404 "Sorry. This resource does not exist.";
        }
    }
}