user www-data; ## Default is 'www www' which is 'nobody'
worker_processes auto; ## Default: 1
pid /var/run/nginx.pid;

events {   
    worker_connections 1024; ## Default: 1024
}

http {
    # Enable .css, .js, .png, .jpeg, and more...
    include mime.types;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] $status $request $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for';

    server {
        # Sending a file requires the following steps: 
        # - malloc  Allocate local buffer to store data
        # - read    Retrieve and copy object into local buffer
        # - write   Copy object from local- to socket buffer
        # The process to copy objects into local buffers can be unnecessary. 'sendfile on' retrieves 
        # the object from file cache and pass the pointer straight back to the socket descriptor.
        # Drawbacks: (1) does not work with UNIX sockets and (2) can perform different depending on the OS
        sendfile on;

        # tcp_nopush will wait to send the packet to the client until the packet is 
        # of maximum segment size (MSS) instead of sending it as fast as possible. 
        # Requires 'sendfile on'
        tcp_nopush on;

        # tcp_nodelay disables the Nagle buffering algorithm. This setting should only be set for
        # applications that send frequent small bursts of information without getting an immediate
        # response, where timely delivery of data is required (example is mouse movements)
        tcp_nodelay on;

        # Open_file Cache
        # On Linux based operating systems, everything is being done using files. 
        # Open_file cache allows the server to cache file descriptors and all the frequently accessed files
        # -------------------------------------------------------------------------------------------------
        open_file_cache max=1024 inactive=10;   # How long and how many files nginx can keep open and cached in memory
        open_file_cache_valid 120s;             # Time interval to check if currently cached files are still valid. Can reduce time nginx must open and close our static HTML files.
        open_file_cache_min_uses 2;             # By default, entries in open_file_cache are cleared after a period of inactivity (default: 60s). This prevent nginx from removing cache entry if it is accessed more than three times, it prioritize to clear older entries to free space
        open_file_cache_errors on;              # Enable the caching of file errors

        # Gzip compression
        gzip on;                        # Enable gzip compression
        gzip_http_version 1.1;          # Turn on gzip for http 1.1 and higher
        gzip_buffers 16 8k;             # Numbers of compression buffers and their size (if we exceed this value, disk is used instead of RAM)
        gzip_comp_level 5;              # Gzip compression level (range: 1-9). Higher number reduce size of file, but increase resource consumption. Standard is 3-5 as higher number gives small gains but significant increase of CPU usage
        gzip_min_length 100;            # Minimal length of response that is gzipped. Length is determined from "Content-Length" resposne header field
        gzip_proxied any;               # Enable gzip compression for all proxied requests (e.g. CDN)
        gzip_vary on;                   # Enable inserting the "Vary: Accept-Encoding" in gzipped response header fields
        gzip_disable "msie6";           # Disable gzip for Internet Explorer 6, as it had issues with gzip
        gzip_types                      # text/html is always compressed by HttpGzipModule
            text/css
            text/javascript
            text/xml
            text/plain
            text/x-component
            application/javascript
            application/x-javascript
            application/json
            application/xml
            application/rss+xml
            application/atom+xml
            font/truetype
            font/opentype
            application/vnd.ms-fontobject
            image/svg+xml;

        # Connection timeouts
        # Be careful when setting timeout values as too long waiting times can make
        # you vulnerable for attackers, while too short times will cut off slow clients
        # -----------------------------------------------------------------------------
        reset_timedout_connection on;       # Allow server to close connection on non-responding clients
        client_body_timeout 12;             # Max time to receive client body before throwing 408 error (request timeout)
        client_header_timeout 12;           # Max time to receive client header before throwing 408 error (request timeout)
        send_timeout 10;                    # Max time for the client to accept and receive a response

        # Buffer configurations
        client_max_body_size 8m;            # Maximum allowed size of clients request body. Tweak this based on the amount of data a client can send to the server.
        client_body_buffer_size 16K;        # Buffer size for reading client's body. Bodies larger than buffer results in the whole/part of the body being written to temp file. Too small buffer makes nginx constantly use I/O to write remaining parts to the file.
        client_header_buffer_size 1k;       # Buffer size for reading client's headers.
        large_client_header_buffers 2 1k;   # If headers do not fit into client_header_buffer_size then large_client_header_buffers is used

        # Keep-alive configuration
        keepalive_disable msie6;            # Disable selected browsers
        keepalive_requests 1000;            # Number of requests a client can make over a single keep-alive connection
        keepalive_timeout 60;               # Max time to keep a connection open

        # IP Address and Port
        listen 80;
        server_name 10.0.0.1;

        # Root folder for HTML files
        root html;

        # Index page
        index index.html index.htm index.php;

        # Error page
        error_page 404 /404;

        # Logging
        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log;

        # Standard caching of files of common file types
        location ~* .(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 1M;
            add_header Cache-Control public;    # Cache-Control for managing cache in HTTP/1.1+ clients
            add_header Pragma public;           # Cache-Control for managing cache in HTTP/1.0- clients
            add_header Vary Accept-Encoding;    # Enables cache to identify a resource based on URI and encoding
        }

        # Locations
        location / {
            # try_files checks the existence of files in the specified order and uses the first found file for request processing
            try_files $uri $uri/ =404;
        }

        location /404 {
            return 404 "Sorry. This resource does not exist.";
        }
    }
}